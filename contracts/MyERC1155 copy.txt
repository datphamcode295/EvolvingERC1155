// // SPDX-License-Identifier: MIT
// pragma solidity ^0.8.0;

// import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
// import "@openzeppelin/contracts/access/Ownable.sol";

// contract MyERC1155 is ERC1155, Ownable {
//     // Mapping from token ID to its URI
//     mapping(uint256 => string) private _tokenURIs;
//     mapping(address => uint256) public mintedTokens;

//     constructor(string memory baseURI) ERC1155(baseURI) Ownable(msg.sender) {}

//     // constructor() ERC1155("https://game.example/api/item/{id}.json") {} Ownable(msg.sender){}

//     function setTokenURI(uint256 tokenId, string memory tokenURI) external onlyOwner {
//         _tokenURIs[tokenId] = tokenURI;
//     }

//     function uri(uint256 tokenId) public view virtual override returns (string memory) {
//         string memory tokenURI = _tokenURIs[tokenId];
//         return tokenURI;
//     }

//     function mint(uint256 amount) external {
//         require(amount > 0, "Amount must be positive");
//         // Mint NFT with ID 0
//         _mint(msg.sender, 0, amount, "");
//         mintedTokens[msg.sender] += amount;
//     }

//     function evolve() external {
//         require(balanceOf(msg.sender, 0) >= 2, "Not enough NFT ID 0");
        
//         // Burn 2 NFTs with ID 0
//         _burn(msg.sender, 0, 2);

//         // Mint 1 NFT with ID 1
//         _mint(msg.sender, 1, 1, "");
//     }
// }

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@thirdweb-dev/contracts/base/ERC1155SignatureMint.sol";

contract MyERC1155 is ERC1155SignatureMint {
    constructor(
        address _defaultAdmin,
        string memory _name,
        string memory _symbol,
        address _royaltyRecipient,
        uint128 _royaltyBps,
        address _primarySaleRecipient
    ) ERC1155SignatureMint(_defaultAdmin, _name, _symbol, _royaltyRecipient, _royaltyBps, _primarySaleRecipient) {}

    // Function to evolve/upgrade NFTs by burning 2 of ID 0 to mint 1 of ID 1
    function evolveNFT() external {       
        // Burn 2 NFTs with ID 0
        _burn(msg.sender, 0, 2);
        
        // Mint 1 NFT with ID 1
        _mint(msg.sender, 1, 1, "");
    }
}